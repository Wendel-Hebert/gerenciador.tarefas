<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <%- include('../partials/header') %>
  
  <main>
    <div class="container">
      <div class="page-header">
        <h1><i class="fas fa-tasks"></i> Gerenciar Tarefas</h1>
        <button class="btn" onclick="showTaskForm()"><i class="fas fa-plus"></i> Nova Tarefa</button>
      </div>
      
      <div id="taskForm" style="display: none;" class="card">
        <h2>Nova Tarefa</h2>
        <form id="addTaskForm">
          <div class="form-group">
            <label for="title">Título</label>
            <input type="text" id="title" name="title" class="form-control" required>
          </div>
          
          <div class="form-group">
            <label for="description">Descrição</label>
            <textarea id="description" name="description" class="form-control" rows="3"></textarea>
          </div>
          
          <div class="form-group">
            <label for="category">Categoria</label>
            <select id="category" name="category_id" class="form-control">
              <option value="">Selecione uma categoria</option>
              <!-- Aqui você pode adicionar as categorias dinamicamente -->
            </select>
          </div>
          
          <div class="form-group">
            <label for="dueDate">Data de Vencimento</label>
            <input type="date" id="dueDate" name="dueDate" class="form-control">
          </div>
          
          <div class="form-group">
            <label for="userId">ID do Usuário</label>
            <input type="number" id="userId" name="userId" class="form-control" required>
          </div>
          
          <div class="form-group">
            <label for="categoryId">ID da Categoria (opcional)</label>
            <input type="number" id="categoryId" name="categoryId" class="form-control">
          </div>
          
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Salvar</button>
            <button type="button" id="cancelBtn" class="btn" onclick="hideTaskForm()">Cancelar</button>
          </div>
        </form>
      </div>
      
      <div class="table-container">
        <h2>Lista de Tarefas</h2>
        <table id="tasksTable">
          <thead>
            <tr>
              <th>ID</th>
              <th>Título</th>
              <th>Status</th>
              <th>Data de Vencimento</th>
              <th>Usuário</th>
              <th>Categoria</th>
              <th>Ações</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="7" class="loading">Carregando tarefas...</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </main>
  
  <%- include('../partials/footer') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const taskForm = document.getElementById('taskForm');
      const cancelBtn = document.getElementById('cancelBtn');
      const tasksTable = document.getElementById('tasksTable').querySelector('tbody');
      
      // Carregar tarefas ao iniciar
      loadTasks();
      
      // Configurar eventos
      taskForm.addEventListener('submit', handleSubmit);
      cancelBtn.addEventListener('click', resetForm);
      
      // Função para carregar tarefas
      async function loadTasks() {
        try {
          const response = await fetch('/api/tasks');
          if (!response.ok) {
            throw new Error('Erro ao buscar tarefas');
          }
          
          const tasks = await response.json();
          renderTasks(tasks);
        } catch (error) {
          console.error('Erro:', error);
          tasksTable.innerHTML = `<tr><td colspan="7" class="error">Erro ao carregar tarefas: ${error.message}</td></tr>`;
        }
      }
      
      // Função para renderizar tarefas na tabela
      function renderTasks(tasks) {
        if (tasks.length === 0) {
          tasksTable.innerHTML = '<tr><td colspan="7" class="empty">Nenhuma tarefa encontrada</td></tr>';
          return;
        }
        
        tasksTable.innerHTML = '';
        tasks.forEach(task => {
          const row = document.createElement('tr');
          
          // Formatar data de vencimento
          const dueDate = task.due_date ? new Date(task.due_date).toLocaleDateString() : 'N/A';
          
          // Traduzir status
          let statusText = 'Pendente';
          if (task.status === 'in progress') statusText = 'Em Progresso';
          if (task.status === 'done') statusText = 'Concluída';
          
          row.innerHTML = `
            <td>${task.id}</td>
            <td>${task.title}</td>
            <td>${statusText}</td>
            <td>${dueDate}</td>
            <td>${task.user_id}</td>
            <td>${task.category_id || 'N/A'}</td>
            <td class="actions">
              <button class="btn btn-edit" onclick="editTask(${task.id})">Editar</button>
              <button class="btn btn-delete" onclick="deleteTask(${task.id})">Excluir</button>
            </td>
          `;
          
          tasksTable.appendChild(row);
        });
      }
      
      // Função para lidar com o envio do formulário
      async function handleSubmit(event) {
        event.preventDefault();
        
        const taskId = document.getElementById('taskId').value;
        const taskData = {
          title: document.getElementById('title').value,
          description: document.getElementById('description').value,
          status: document.getElementById('status').value,
          due_date: document.getElementById('dueDate').value || null,
          user_id: parseInt(document.getElementById('userId').value),
          category_id: document.getElementById('categoryId').value ? parseInt(document.getElementById('categoryId').value) : null
        };
        
        try {
          let url = '/api/tasks';
          let method = 'POST';
          
          if (taskId) {
            url = `/api/tasks/${taskId}`;
            method = 'PUT';
          }
          
          const response = await fetch(url, {
            method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(taskData)
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao salvar tarefa');
          }
          
          resetForm();
          loadTasks();
          alert(taskId ? 'Tarefa atualizada com sucesso!' : 'Tarefa criada com sucesso!');
        } catch (error) {
          console.error('Erro:', error);
          alert(`Erro: ${error.message}`);
        }
      }
      
      // Função para resetar o formulário
      function resetForm() {
        document.getElementById('taskId').value = '';
        document.getElementById('title').value = '';
        document.getElementById('description').value = '';
        document.getElementById('status').value = 'pending';
        document.getElementById('dueDate').value = '';
        document.getElementById('userId').value = '';
        document.getElementById('categoryId').value = '';
      }
      
      // Função global para editar tarefa
      window.editTask = async function(id) {
        try {
          const response = await fetch(`/api/tasks/${id}`);
          if (!response.ok) {
            throw new Error('Erro ao buscar detalhes da tarefa');
          }
          
          const task = await response.json();
          
          document.getElementById('taskId').value = task.id;
          document.getElementById('title').value = task.title;
          document.getElementById('description').value = task.description || '';
          document.getElementById('status').value = task.status;
          document.getElementById('dueDate').value = task.due_date ? new Date(task.due_date).toISOString().split('T')[0] : '';
          document.getElementById('userId').value = task.user_id;
          document.getElementById('categoryId').value = task.category_id || '';
          
          // Rolar até o formulário
          document.querySelector('.form-container').scrollIntoView({ behavior: 'smooth' });
        } catch (error) {
          console.error('Erro:', error);
          alert(`Erro ao editar: ${error.message}`);
        }
      };
      
      // Função global para excluir tarefa
      window.deleteTask = async function(id) {
        if (!confirm('Tem certeza que deseja excluir esta tarefa?')) {
          return;
        }
        
        try {
          const response = await fetch(`/api/tasks/${id}`, {
            method: 'DELETE'
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro ao excluir tarefa');
          }
          
          loadTasks();
          alert('Tarefa excluída com sucesso!');
        } catch (error) {
          console.error('Erro:', error);
          alert(`Erro ao excluir: ${error.message}`);
        }
      };
    });
  </script>
</body>
</html>



